# Class Directions(enum.Enum)
#	Declare border = -1
#	Declare empty = 0
#	Declare left = 1
#	Declare up = 2
#	Declare right = 4
#	Declare down = 8 
# End Class

# Module main()
#	Declare Int size = get_input(int, "size")							input - size
#	Declare List[[Int]] grid()	
#	grid.generate_grid(size)
#	output_grid(grid, size)
# End Module

# Module output_grid(Grid grid)
#	Declare String line
#	For each x_value in grid.grid
#		Set line = ""
#		For each y_value in grid.grid[x_value]
#			line += y_value + " " As String
#		Display line
# End Module

# Module grid_to_json(Grid grid)
#	With open("maze.json", "w+") as file	
#		json.dump(grid, file);
# End Modules

# Function Grid grid_initialize(Grid grid, Int size)
# 	Set grid = []
# 	For Each x_value in range(size)
# 		Declare [Int] y_values
# 		For y_value in range(size)
# 			If x_value or y_value Is 0 Or
# 				x_value or y_value Is size
# 				Set y_values += Directions.border.value
# 			Else
# 				Set y_values += Directions.empty.value
#		Set grid += y_values
#	return grid
# End Module

# Function Int get_grid_cell(Grid, Int x_value, Int y_value)
# 	 return grid[x_value][y_value]
# End Function

# Function Grid set_grid_cell(Grid grid, Int x_value, Int y_value, Int i_value)
# 	Set grid[x_value][y_value] = i_value
#	Return grid
# End Function	

# Module update_grid_cell(Grid grid, Int x_value, Int y_value, Int i_value)
# 	set_grid_cell(grid, x_value, y_value, get_grid_cell(grid, x_value, y_value) + i_value)
# End Module

# Function Grid generate_grid(Grid grid, Int size) 
# 	Declare Tuple[Int, Int] start_point = get_random_point(size, Directions.border.value)
# 	set_grid_cell(start_point[0],start_point[1],Directions.empty.value)
# 	Declare Tuple[Int, Int] end_point = get_random_point(size, Directions.border.value)
# 	set_grid_cell(start_point[0],start_point[1],Directions.empty.value)
# 	Declare Tuple[Int, Int] current_point = start_point
# 	Declare Tuple[Int, Int] previous_point
# 	Declare Int adjacent_value
# 	Declare Bool is_complete = False
# 	Declare List[Tuple[Int, Int]] adjacent_cells
# 	Declare Int bit_count
# 	While is_complete is False
# 		Set adjacent_cells = []
# 		If current_point[0] != 0										
# 			Set adjacent_value = get_grid_cell(current_point[0]-1, current_point[1]) 
# 			If adjacent_value == Directions.empty.value
# 				Set adjacent_cells += (current_point[0]-1,current_point[1])		
# 		If current_point[0] != size										
# 			Set adjacent_value = get_grid_cell(current_point[0]+1, current_point[1]) 
# 			If adjacent_value == Directions.empty.value
# 				Set adjacent_cells += (current_point[0]+1, current_point[1])				
# 		If current_point[1] != 0											
# 			Set adjacent_value = get_grid_cell(current_point[0], current_point[1]-1) 
# 			If adjacent_value == Directions.empty.value
# 				Set adjacent_cells += (current_point[0], current_point[1]-1
# 		If current_point[1] != size	
# 			Set adjacent_value = get_grid_cell(current_point[0], current_point[1]+1) 
# 			If adjacent_value == Directions.empty.value
# 				Set adjacent_cells += (current_point[0], current_point[1]+1
# 		If adjacent_cells.size != 0
# 			Set previous_point = current_point
# 			Set current_point = adjacent_cells[random_range(0,adjacent_cells.size-1)]
# 			Set bit_count = get_direction(previous_point, current_point)
# 			update_grid_cell(previous_point[0], previous_point[1], get_direction(previous_point, current_point)
# 			update_grid_cell(current_point[0], current_point[1], get_direction(current_point, previous_point)
# 		Else
# 			If is_spaces_available() == True
# 				Set current_point = get_random_point(size, 1)		
# 			Else
# 				Set is_complete = True
# End Function

# Function Tuple<Int, Int> get_random_point(Grid grid, Int size, Int value)	
# 	Declare Bool is_valid = False
# 	Declare Tuple<Int, Int> point
# 	Declare Int cell_value
# 	While is_valid == False
# 		Set point = (random(size), random(size))
# 		Set cell_value = get_grid_cell(grid, point[0], point[1])
# 		If value == 1
# 			If cell_value >= value
# 				is_valid = True
# 		Else If cell_value == value
# 			If cell_value == value
# 				is_valid = True
# 	return point
# End Function

# Function Int get_direction(Tuple[int, int] previous_point, Tuple[Int, Int] current_point) 
# 	Declare x_distance = previous_point[0] - current_point[0]
# 	Declare y_distance = previous_point[1] - current_point[1]
# 	If x_distance < 0 
# 		return Directions.right
# 	Else If x_distance > 0
# 		return Direction.left
# 	Else If y_distance < 0
# 		return Directions.up
# 	Else If y_distance > 0
# 		return Directions.down
# 	else return 0 
# End Function

# Function Bool is_spaces_available()
# 	For each x_value in grid
# 		For each y_value in grid[x_value]
# 			If y_value == Directions.empty.value
# 				return True
# 	return False	
# End Function

# Get input from user in a the specified type
# Function Type get_input(Type input_type, String requested_input)
#	Declare string input
#	Display "Please enter a value for " + requested_input
#	Input user_input
#	While validate_input(user_input, input_type) == False
#		Display "Input invalid, please enter a value for " + requested_input 
#		Input user_input
#	Return input As input_type
# End Function

# Validate the input can be cast as type
# Function Bool validate_input(String input, Type input_type)
#	Try input As input Type 
#		Return True
#	Catch
#		Return False
# End Function